// Parachute edit SCSS
// mixin / function / variable

// --------------------------------------------------------
// Easing
// --------------------------------------------------------
// default（キーワードで準備されていますが、一応変数も作成しておきます）
// sass-lint:disable variable-name-format
$linear: cubic-bezier(0, 0, 1, 1);
$ease: cubic-bezier(0.25, 0.1, 0.25, 1);
$ease-in: cubic-bezier(0.42, 0, 1, 1);
$easeIn: $ease-in;
$ease-out: cubic-bezier(0, 0, 0.58, 1);
$easeOut: $ease-out;
$ease-in-out: cubic-bezier(0.42, 0, 0.58, 1);
$easeInOut: $ease-in-out;

// Sine
$easeInSine: cubic-bezier(0.12, 0, 0.39, 0);
$easeOutSine: cubic-bezier(0.61, 1, 0.88, 1);
$easeInOutSine: cubic-bezier(0.37, 0, 0.63, 1);

// Quad
$easeInQuad: cubic-bezier(0.11, 0, 0.5, 0);
$easeOutQuad: cubic-bezier(0.5, 1, 0.89, 1);
$easeInOutQuad: cubic-bezier(0.45, 0, 0.55, 1);

// Cubic
$easeInCubic: cubic-bezier(0.32, 0, 0.67, 0);
$easeOutCubic: cubic-bezier(0.33, 1, 0.68, 1);
$easeInOutCubic: cubic-bezier(0.65, 0, 0.35, 1);

// Quart
$easeInQuart: cubic-bezier(0.5, 0, 0.75, 0);
$easeOutQuart: cubic-bezier(0.25, 1, 0.5, 1);
$easeInOutQuart: cubic-bezier(0.76, 0, 0.24, 1);

// Quint
$easeInQuint: cubic-bezier(0.64, 0, 0.78, 0);
$easeOutQuint: cubic-bezier(0.22, 1, 0.36, 1);
$easeInOutQuint: cubic-bezier(0.83, 0, 0.17, 1);

// Expo
$easeInExpo: cubic-bezier(0.7, 0, 0.84, 0);
$easeOutExpo: cubic-bezier(0.16, 1, 0.3, 1);
$easeInOutExpo: cubic-bezier(0.87, 0, 0.13, 1);

// Circ
$easeInCirc: cubic-bezier(0.55, 0, 1, 0.45);
$easeOutCirc: cubic-bezier(0, 0.55, 0.45, 1);
$easeInOutCirc: cubic-bezier(0.85, 0, 0.15, 1);

// Back
$easeInBack: cubic-bezier(0.36, 0, 0.66, -0.56);
$easeOutBack: cubic-bezier(0.34, 1.56, 0.64, 1);
$easeInOutBack: cubic-bezier(0.68, -0.6, 0.32, 1.6);

// -------------------------------------------------------------
// Function
// -------------------------------------------------------------

// -------------------------------------------------------------
// vw
// -------------------------------------------------------------
// vw
// 第一引数で基準となる画面幅のフォントサイズ、第二引数で基準となる画面幅を入力
// $size {number} - 基準フォントサイズ(px)
// $viewport {number} - 基準画面幅(default 750px)
// Styleguide 2.3.19
@function get-vw($size, $viewport: 750) {
  $rate: 100 / $viewport;

  @return $rate * $size * 1vw;
}

// -------------------------------------------------------------
// fonts
// -------------------------------------------------------------
// letter-spacing を計算します
//
// $letter-spacing=0 - 設定値, [Number, inline-block]
// Styleguide 2.1.1
@function ls($letter-spacing: 0) {
  @if ($letter-spacing == "inline-block") {
    @return -0.4em;
  } @else {
    @return #{$letter-spacing * 0.001 + "em"};
  }
}

// line-height を計算します
//
// $line-spacing=1 - font-size に対する line-height gap
// $font-size=1 - font-size, 単位なし
// Styleguide 2.1.2
@function lh($line-spacing: 1, $font-size: 1) {
  @return $line-spacing / $font-size;
}

// -------------------------------------------------------------
// svg
// -------------------------------------------------------------

//  Function to create an optimized svg url
//  Version: 1.0.6
//  ref: https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  /* stylelint-disable indentation */
  @return if(
    $index,
    str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace),
    $string
  );
  /* stylelint-enable indentation */
}

// @require str-replace
// str-index: sass.function
// ceil: sass.function
// str-slice: sass.function
@function svg-url($svg) {
  //
  //  Add missing namespace
  //
  @if not str-index($svg, xmlns) {
    $svg: str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, "%", "%25");
    $chunk: str-replace($chunk, "#", "%23");
    $chunk: str-replace($chunk, "{", "%7B");
    $chunk: str-replace($chunk, "}", "%7D");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");

    //
    //    The maybe list
    //
    //    Keep size and compile time down
    //    ... only add on documented fail
    //
    //  $chunk: str-replace($chunk, '&', '%26');
    //  $chunk: str-replace($chunk, '|', '%7C');
    //  $chunk: str-replace($chunk, '[', '%5B');
    //  $chunk: str-replace($chunk, ']', '%5D');
    //  $chunk: str-replace($chunk, '^', '%5E');
    //  $chunk: str-replace($chunk, '`', '%60');
    //  $chunk: str-replace($chunk, ';', '%3B');
    //  $chunk: str-replace($chunk, '?', '%3F');
    //  $chunk: str-replace($chunk, ':', '%3A');
    //  $chunk: str-replace($chunk, '@', '%40');
    //  $chunk: str-replace($chunk, '=', '%3D');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

// -------------------------------------------------------------
// Mixin
// -------------------------------------------------------------

//  Function to create an optimized svg url
//  Version: 1.0.6
//  ref: https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
//  Background svg mixin
// @require svg-url
@mixin background-svg($svg) {
  background-image: svg-url($svg);
}

// 可変サイズフォント(vw)を設定する
// $font-size: target font size (px) - default 10
// $viewport: 基準画面幅 - default 750
// @example
// @include(12, 750);
// 画面幅 750px 幅の時に 12px になる font
// Styleguide 2.3.20
// @require get-vw
@mixin vw($font-size: 10, $viewport: 750) {
  font-size: get-vw($font-size, $viewport);
}

// 固定幅で比率計算し rect を作成します
@mixin box($width, $height, $unit: "px") {
  width: #{$width}#{$unit};
  height: 0;
  padding-top: #{$height}#{$unit};
}

// width / height を使用し固定比率 rect を作成します
// @require get-vw
@mixin box-vw($width, $height, $base: 750) {
  width: get-vw($width, $base);
  height: 0;
  padding-top: get-vw($height, $base);
}

// ratio control
// 任意のアスペクト比で可変ボックスを作成
@mixin aspect-box($width, $height) {
  position: relative;

  &::before {
    display: block;
    width: 100%;
    padding-top: ($height / $width) * 100%;
    content: "";
  }
}

// PS / AI font-size / line height から CSS line-height を計算します
// 単位なしを推奨します
@mixin line-height($font-size, $line-height) {
  line-height: $line-height / $font-size;
}

// -------------------------------------------------------------
// COPY from common.scss
// -------------------------------------------------------------

// PC
$content-width: 1280;
// SP
$content-width_sp: 767;
//header・footerのブレイクポイント
$breakpoint-width01: 1230;
//header・footerのブレイクポイント
$breakpoint-width02: 1229;

@mixin sp {
  @media (max-width: ($content-width_sp) + px) {
    @content;
  }
}

@mixin tab {
  @media (max-width: ($breakpoint-width01) + px) {
    @content;
  }
}
