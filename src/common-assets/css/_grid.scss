@use "libs/asset";
/*
[layout]grid
==========================================================================
*/

// Round (四捨五入)
@function round-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "round");
}

// Ceil (切り上げ)
@function ceil-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "ceil");
}

// Floor (切り捨て)
@function floor-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "floor");
}

@function to-fixed($number, $digits: 0, $round: "round") {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $round == "round" {
    @return round($number * $n) / $n;
  } @else if $round == "ceil" {
    @return ceil($number * $n) / $n;
  } @else if $round == "floor" {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $round } is undefined keyword.';
    @return $number;
  }
}

// round-decimal(0.333)    => 0
// round-decimal(0.333, 1) => 0.3
// round-decimal(0.333, 2) => 0.33
// round-decimal(0.666)    => 1
// round-decimal(0.666, 1) => 0.7
// round-decimal(0.666, 2) => 0.67

// ceil-decimal(0.333)     => 1
// ceil-decimal(0.333, 1)  => 0.4
// ceil-decimal(0.333, 2)  => 0.34
// ceil-decimal(0.666)     => 1
// ceil-decimal(0.666, 1)  => 0.7
// ceil-decimal(0.666, 2)  => 0.67

// floor-decimal(0.333)    => 0
// floor-decimal(0.333, 1) => 0.3
// floor-decimal(0.333, 2) => 0.33
// floor-decimal(0.666)    => 0
// floor-decimal(0.666, 1) => 0.6
// floor-decimal(0.666, 2) => 0.66

// 基準幅（最大有効幅）
$default_width: 1280; // px

// カラム（横方向）分割数
$default_column: 12;

// ブレイクポイント
//$content-width_sp: 767; // px

// 1カラム計算
$column-width: round-decimal((100% / 12));

//@mixin sp {
//  @media (max-width: (asset.$content-width_sp) + px) {
//    @content;
//  }
//}

.container {
  margin: 0 auto;
}

.aem-Grid {
  display: flex;
  flex-wrap: wrap;
  padding: 0 25px;
  margin: 0 -15px 0;
  .aem-Grid {
    width: 100%;
    padding: 0;
    margin: 0 auto;
  }
  [class*="aem-GridColumn--default--"] {
    padding: 0 15px;
    @include asset.sp {
      padding: 0 7.5px;
    }
    [class*="aem-GridColumn--default--"] {
      [class*="aem-GridColumn--default--"] {
        padding: 0;
        @include asset.sp {
          padding: 0;
        }
      }
    }
  }
  &.center-Grid {
    justify-content: center;
  }
  &.right-Grid {
    justify-content: flex-end;
  }
  &.side-Grid {
    justify-content: space-between;
  }
  &.reverse-Grid {
    flex-flow: row-reverse;
  }

  @for $i from 1 through 12 {
    .aem-GridColumn--default--#{$i} {
      width: $column-width * $i;
    }
  }
}

@include asset.sp {
  .aem-Grid {
    margin: 0 -7.5px;
    @for $i from 1 through 12 {
      .aem-GridColumn--phone--#{$i} {
        width: $column-width * $i;
      }
    }
  }
}
